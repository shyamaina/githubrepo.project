Project Document:

Programming Language: C++
Development Environment: Any C++ compatible IDE (e.g., Visual Studio, DevCpp)
Project Details: Overview,Features and Functionalities,Usage
Project Title: Implementation of Binary search tree(BST)

Implement Binary Search Tree with Following functions:
- search
- insert
- delete
- inorder traversal
- preorder traversal
- postorder traversal


Overview:

The project involves implementing a Binary Search Tree (BST) in C++. The BST is a fundamental data structure in computer science used for efficient data storage, retrieval, and manipulation. The project includes the core functionalities of a BST: insertion, search, and deletion of nodes. Additionally, it includes methods for in-order, pre-order, and post-order tree traversals to display the elements in different sequences.

Features and Functionalities:

Node Structure:

Each node in the BST contains an integer data, and pointers to the left and right children.
BST Class:

The class encapsulates the BST root and provides methods for various operations.


Insertion:
Inserts a new value into the BST while maintaining its properties. Values less than the current node go to the left, and values greater go to the right.

Search:
Searches for a specific value in the BST and returns the node if found, otherwise returns NULL.

Deletion:
Deletes a node with a given value from the BST. Handles three cases:
Node with no children (leaf node).
Node with one child.
Node with two children, where the node is replaced with its in-order successor.


Traversal Methods:
In-order Traversal: Visits nodes in ascending order (left, root, right).
Pre-order Traversal: Visits nodes in root-first order (root, left, right).
Post-order Traversal: Visits nodes in leaf-first order (left, right, root).

Time Complexity:
Average Case : O(log n) for insertion, deletion, and search operations.
 Worst Case : O(n) for insertion, deletion, and search operations in an unbalanced BST.

Usage:
The main function demonstrates the usage of the BST class by performing a series of insertions, a search, a deletion, and different types of traversals. The following operations are performed:

Insert values 25 15 10 22 35 30 40
Display the tree using in-order, pre-order, and post-order traversals.
Search for the value 22
Delete the node with the value 10.
Display the tree using in-order traversal after deletion.
